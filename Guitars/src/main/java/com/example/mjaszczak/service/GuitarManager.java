package com.example.mjaszczak.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.mjaszczak.domain.Guitar;

public class GuitarManager {

    private Connection connection;

    private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private static final String CREATE_TABLE_GUITAR = "CREATE TABLE Guitar(id bigint GENERATED BY DEFAULT AS IDENTITY, brand varchar(20), model varchar(20";

    private PreparedStatement addGuitarStmt;
    private PreparedStatement deleteAllGuitarsStmt;
    private PreparedStatement getAllGuitarsStmt;
    private PreparedStatement deleteGuitarStmt;
    private PreparedStatement updateGuitarStmt;

    private Statement statement;

    public GuitarManager() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Guitar".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(CREATE_TABLE_GUITAR);

            addGuitarStmt = connection
                    .prepareStatement("INSERT INTO Guitar (brand, model) VALUES (?, ?)");
            deleteAllGuitarsStmt = connection
                    .prepareStatement("DELETE FROM Guitar");
            getAllGuitarsStmt = connection
                    .prepareStatement("SELECT id, brand, model FROM Guitar");
            deleteGuitarStmt = connection
                    .prepareStatement("DELETE FROM Guitar WHERE id = ?");
            updateGuitarStmt = connection
                    .prepareStatement("UPDATE Guitar SET brand = ?, model = ? WHERE id = ?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public void clearGuitars() {
        try {
            deleteAllGuitarsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addGuitar(Guitar guitar) {
        int count = 0;
        try {
            addGuitarStmt.setString(1, guitar.getBrand());
            addGuitarStmt.setString(2, guitar.getModel());

            count = addGuitarStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public int deleteGuitar(Guitar guitar){
        int count = 0;
        try {
            deleteGuitarStmt.setLong(1, guitar.getId());

            count = deleteGuitarStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public int updateGuitar(Guitar guitar, String brand, String model){
        int count = 0;
        try{
            updateGuitarStmt.setString(1, brand);
            updateGuitarStmt.setString(2, model);
            updateGuitarStmt.setLong(3, guitar.getId());

            count = updateGuitarStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public List<Guitar> getAllGuitars() {
        List<Guitar> guitars = new ArrayList<Guitar>();

        try {
            ResultSet rs = getAllGuitarsStmt.executeQuery();

            while (rs.next()) {
                Guitar g = new Guitar();
                g.setId(rs.getInt("id"));
                g.setBrand(rs.getString("brand"));
                g.setModel(rs.getString("model"));
                guitars.add(g);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return guitars;
    }

    public List<Guitar> getGuitar(Long id) {
        List<Guitar> guitars = new ArrayList<Guitar>();
        try {
            ResultSet rs = getAllGuitarsStmt.executeQuery();

            while (rs.next()) {
                Guitar g = new Guitar();
                g.setId(rs.getInt("id"));
                g.setBrand(rs.getString("brand"));
                g.setModel(rs.getString("model"));
                if(g.getId() == id){
                    guitars.add(g);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return guitars;
    }

    public List<Guitar> getGuitarrByBrand(String brand) {
        List<Guitar> guitars = new ArrayList<Guitar>();

        try {
            ResultSet rs = getAllGuitarsStmt.executeQuery();

            while (rs.next()) {
                Guitar g = new Guitar();
                g.setId(rs.getInt("id"));
                g.setBrand(rs.getString("brand"));
                g.setModel(rs.getString("model"));
                if(g.getBrand() == brand){
                    guitars.add(g);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return guitars;
    }
}